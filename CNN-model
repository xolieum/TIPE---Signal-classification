import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import numpy as np
import os


class SleepStageCNN(nn.Module):
    def __init__(self, input_channels):
        super(SleepStageCNN, self).__init__()
        
        self.conv1 = nn.Conv1d(input_channels, 32, kernel_size=3, padding=1)  # (4400 → 4400)
        self.pool1 = nn.MaxPool1d(kernel_size=2, padding=1)                   # (4400 → ~2200)
        
        self.conv2 = nn.Conv1d(32, 64, kernel_size=3, padding=1)              # (2200 → 2200)
        self.pool2 = nn.MaxPool1d(kernel_size=2, padding=1)                   # (2200 → ~1100)
        
        self.conv3 = nn.Conv1d(64, 128, kernel_size=3, padding=1)             # (1100 → 1100)
        self.conv4 = nn.Conv1d(128, 128, kernel_size=3, padding=1)            # (1100 → 1100)
        self.pool3 = nn.MaxPool1d(kernel_size=2, padding=1)                   # (1100 → ~550)
        
        self.flatten_dim = 550 * 128  # 550 time steps, 128 channels
        self.fc1 = nn.Linear(self.flatten_dim, 256)
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, 64)
        self.out = nn.Linear(64, 1)  # Use nn.Linear(64, num_classes) for multi-class

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool1(x)
        
        x = F.relu(self.conv2(x))
        x = self.pool2(x)
        
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = self.pool3(x)
        
        x = x.view(x.size(0), -1)  # Flatten
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.out(x)  # Use torch.sigmoid(x) or torch.softmax(x, dim=1) outside this module
        
        return x
    
# Sortie : nombre de classes
self.output = nn.Linear(5, num_classes)

# Entraînement : utiliser CrossEntropyLoss (inclut log softmax)
criterion = nn.CrossEntropyLoss()

# Prédiction :
outputs = model(x)
classe = torch.argmax(outputs, dim=1)